import { instanceMethod, arrayProp, Typegoose } from 'typegoose';

import PasswordResetToken from './reset-token';

// Token settings
const maxTokens = 3;

export default class PasswordResetTokens extends Typegoose {
  @arrayProp({ items: PasswordResetToken })
  tokens!: PasswordResetToken[];

  @instanceMethod
  removeOldTokens(): void {
    this.tokens.forEach((token, index) => {
      if (!token.persists) this.tokens.splice(index, 1);
    });
  }

  @instanceMethod
  private generateToken(): Promise<string> {
    const resetToken = new PasswordResetToken()
    this.tokens.push(resetToken)
    return resetToken.construct()
  }

  /**
   * Create new password reset token if number of existing 
   * does not exceed resetTokenSettings.maxTokens.
   * @returns password reset token string promise
   * @throws 'Attempted to create too many password reset tokens'
   * if number of existing tokens exceed resetTokenSettings.maxTokens.
   */
  @instanceMethod
  async createToken(): Promise<string> {
    this.removeOldTokens()
    if (this.tokens.length >= maxTokens) {
      throw Error('Attempted to create too many password reset tokens')
    } else {
      return this.generateToken()
    }
  }

  @instanceMethod
  removeAllTokens() {
    this.tokens.length = 0;
  }

  /**
   * Validate if a password reset token is valid for the user, 
   * if true invalidates all tokens.
   * @param token password reset token generated by this.createResetToken()
   * @returns true if valid, false if invalid
   */
  @instanceMethod
  valitate(userProvidedToken: string): boolean {
    this.tokens.forEach(resetToken => {
      if (resetToken.validate(userProvidedToken)) {
        this.removeAllTokens();
        return true;
      }
    });
    return false;
  }
}