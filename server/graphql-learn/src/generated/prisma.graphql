# source: https://eu1.prisma.sh/m-29bd4e/database/dev
# timestamp: Sat Nov 24 2018 17:53:51 GMT+0000 (Greenwich Mean Time)

type AggregateLink {
  count: Int!
}

type AggregateMutation {
  count: Int!
}

type AggregateQuery {
  count: Int!
}

scalar DateTime

type Link implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input LinkWhereUniqueInput {
  id: ID
}

type Mutation {
  post: Link!
}

"""A connection to a list of items."""
type MutationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MutationEdge]!
  aggregate: AggregateMutation!
}

"""An edge in a connection."""
type MutationEdge {
  """The item at the end of the edge."""
  node: Mutation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MutationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MutationSubscriptionPayload {
  mutation: MutationType!
  node: Mutation
  updatedFields: [String!]
}

input MutationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MutationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MutationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MutationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MutationWhereInput
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input MutationWhereInput {
  """Logical AND on all given filters."""
  AND: [MutationWhereInput!]

  """Logical OR on all given filters."""
  OR: [MutationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MutationWhereInput!]
  post: LinkWhereInput
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  queries(where: QueryWhereInput, orderBy: QueryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Query]!
  mutations(where: MutationWhereInput, orderBy: MutationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mutation]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  link(where: LinkWhereUniqueInput!): Link
  queriesConnection(where: QueryWhereInput, orderBy: QueryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QueryConnection!
  mutationsConnection(where: MutationWhereInput, orderBy: MutationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MutationConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

"""A connection to a list of items."""
type QueryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QueryEdge]!
  aggregate: AggregateQuery!
}

"""An edge in a connection."""
type QueryEdge {
  """The item at the end of the edge."""
  node: Query!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QueryOrderByInput {
  info_ASC
  info_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QueryPreviousValues {
  info: String!
}

type QuerySubscriptionPayload {
  mutation: MutationType!
  node: Query
  updatedFields: [String!]
  previousValues: QueryPreviousValues
}

input QuerySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuerySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuerySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuerySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QueryWhereInput
}

input QueryWhereInput {
  """Logical AND on all given filters."""
  AND: [QueryWhereInput!]

  """Logical OR on all given filters."""
  OR: [QueryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QueryWhereInput!]
  info: String

  """All values that are not equal to given value."""
  info_not: String

  """All values that are contained in given list."""
  info_in: [String!]

  """All values that are not contained in given list."""
  info_not_in: [String!]

  """All values less than the given value."""
  info_lt: String

  """All values less than or equal the given value."""
  info_lte: String

  """All values greater than the given value."""
  info_gt: String

  """All values greater than or equal the given value."""
  info_gte: String

  """All values containing the given string."""
  info_contains: String

  """All values not containing the given string."""
  info_not_contains: String

  """All values starting with the given string."""
  info_starts_with: String

  """All values not starting with the given string."""
  info_not_starts_with: String

  """All values ending with the given string."""
  info_ends_with: String

  """All values not ending with the given string."""
  info_not_ends_with: String
  feed_every: LinkWhereInput
  feed_some: LinkWhereInput
  feed_none: LinkWhereInput
}

type Subscription {
  query(where: QuerySubscriptionWhereInput): QuerySubscriptionPayload
  mutation(where: MutationSubscriptionWhereInput): MutationSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
}
